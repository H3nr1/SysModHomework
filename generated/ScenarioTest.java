/*
 * generated by Fujaba - CodeGen2
 */
import maumau.Player;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import maumau.Card;
import maumau.Suit;
import maumau.DrawingStack;
import maumau.PlayingStack;
import maumau.Turn;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import junit.framework.TestCase;


public class ScenarioTest extends TestCase
{



   /**
    * <pre>
    *           0..1     object_Artjom     0..1
    * ScenarioTest ------------------------> Player
    *           test               Artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "Artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (Player value)
   {
      boolean changed = false;

      if (this.Artjom != value)
      {
      
         Player oldValue = this.Artjom;
         this.Artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public ScenarioTest withArtjom (Player value)
   {
      setArtjom (value);
      return this;
   }

   public Player getArtjom ()
   {
      return this.Artjom;
   }

   /**
    * <pre>
    *           0..1     object_C10     0..1
    * ScenarioTest ------------------------> Card
    *           test               C10
    * </pre>
    */
   public static final String PROPERTY_C10 = "C10";

   @Property( name = PROPERTY_C10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card C10;

   @Property( name = PROPERTY_C10 )
   public boolean setC10 (Card value)
   {
      boolean changed = false;

      if (this.C10 != value)
      {
      
         Card oldValue = this.C10;
         this.C10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_C10 )
   public ScenarioTest withC10 (Card value)
   {
      setC10 (value);
      return this;
   }

   public Card getC10 ()
   {
      return this.C10;
   }

   /**
    * <pre>
    *           0..1     object_D8     0..1
    * ScenarioTest ------------------------> Card
    *           test               D8
    * </pre>
    */
   public static final String PROPERTY_D8 = "D8";

   @Property( name = PROPERTY_D8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D8;

   @Property( name = PROPERTY_D8 )
   public boolean setD8 (Card value)
   {
      boolean changed = false;

      if (this.D8 != value)
      {
      
         Card oldValue = this.D8;
         this.D8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D8 )
   public ScenarioTest withD8 (Card value)
   {
      setD8 (value);
      return this;
   }

   public Card getD8 ()
   {
      return this.D8;
   }

   /**
    * <pre>
    *           0..1     object_DK     0..1
    * ScenarioTest ------------------------> Card
    *           test               DK
    * </pre>
    */
   public static final String PROPERTY_DK = "DK";

   @Property( name = PROPERTY_DK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DK;

   @Property( name = PROPERTY_DK )
   public boolean setDK (Card value)
   {
      boolean changed = false;

      if (this.DK != value)
      {
      
         Card oldValue = this.DK;
         this.DK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DK )
   public ScenarioTest withDK (Card value)
   {
      setDK (value);
      return this;
   }

   public Card getDK ()
   {
      return this.DK;
   }

   /**
    * <pre>
    *           0..1     object_D     0..1
    * ScenarioTest ------------------------> Suit
    *           test               D
    * </pre>
    */
   public static final String PROPERTY_D = "D";

   @Property( name = PROPERTY_D, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Suit D;

   @Property( name = PROPERTY_D )
   public boolean setD (Suit value)
   {
      boolean changed = false;

      if (this.D != value)
      {
      
         Suit oldValue = this.D;
         this.D = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D )
   public ScenarioTest withD (Suit value)
   {
      setD (value);
      return this;
   }

   public Suit getD ()
   {
      return this.D;
   }

   /**
    * <pre>
    *           0..1     object_Deck     0..1
    * ScenarioTest ------------------------> DrawingStack
    *           test               Deck
    * </pre>
    */
   public static final String PROPERTY_DECK = "Deck";

   @Property( name = PROPERTY_DECK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private DrawingStack Deck;

   @Property( name = PROPERTY_DECK )
   public boolean setDeck (DrawingStack value)
   {
      boolean changed = false;

      if (this.Deck != value)
      {
      
         DrawingStack oldValue = this.Deck;
         this.Deck = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DECK )
   public ScenarioTest withDeck (DrawingStack value)
   {
      setDeck (value);
      return this;
   }

   public DrawingStack getDeck ()
   {
      return this.Deck;
   }

   /**
    * <pre>
    *           0..1     object_Eero     0..1
    * ScenarioTest ------------------------> Player
    *           test               Eero
    * </pre>
    */
   public static final String PROPERTY_EERO = "Eero";

   @Property( name = PROPERTY_EERO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Eero;

   @Property( name = PROPERTY_EERO )
   public boolean setEero (Player value)
   {
      boolean changed = false;

      if (this.Eero != value)
      {
      
         Player oldValue = this.Eero;
         this.Eero = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_EERO )
   public ScenarioTest withEero (Player value)
   {
      setEero (value);
      return this;
   }

   public Player getEero ()
   {
      return this.Eero;
   }

   /**
    * <pre>
    *           0..1     object_H8     0..1
    * ScenarioTest ------------------------> Card
    *           test               H8
    * </pre>
    */
   public static final String PROPERTY_H8 = "H8";

   @Property( name = PROPERTY_H8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H8;

   @Property( name = PROPERTY_H8 )
   public boolean setH8 (Card value)
   {
      boolean changed = false;

      if (this.H8 != value)
      {
      
         Card oldValue = this.H8;
         this.H8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H8 )
   public ScenarioTest withH8 (Card value)
   {
      setH8 (value);
      return this;
   }

   public Card getH8 ()
   {
      return this.H8;
   }

   /**
    * <pre>
    *           0..1     object_HJ     0..1
    * ScenarioTest ------------------------> Card
    *           test               HJ
    * </pre>
    */
   public static final String PROPERTY_HJ = "HJ";

   @Property( name = PROPERTY_HJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HJ;

   @Property( name = PROPERTY_HJ )
   public boolean setHJ (Card value)
   {
      boolean changed = false;

      if (this.HJ != value)
      {
      
         Card oldValue = this.HJ;
         this.HJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HJ )
   public ScenarioTest withHJ (Card value)
   {
      setHJ (value);
      return this;
   }

   public Card getHJ ()
   {
      return this.HJ;
   }

   /**
    * <pre>
    *           0..1     object_HQ     0..1
    * ScenarioTest ------------------------> Card
    *           test               HQ
    * </pre>
    */
   public static final String PROPERTY_HQ = "HQ";

   @Property( name = PROPERTY_HQ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HQ;

   @Property( name = PROPERTY_HQ )
   public boolean setHQ (Card value)
   {
      boolean changed = false;

      if (this.HQ != value)
      {
      
         Card oldValue = this.HQ;
         this.HQ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HQ )
   public ScenarioTest withHQ (Card value)
   {
      setHQ (value);
      return this;
   }

   public Card getHQ ()
   {
      return this.HQ;
   }

   /**
    * <pre>
    *           0..1     object_OpenCards     0..1
    * ScenarioTest ------------------------> PlayingStack
    *           test               OpenCards
    * </pre>
    */
   public static final String PROPERTY_OPEN_CARDS = "OpenCards";

   @Property( name = PROPERTY_OPEN_CARDS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private PlayingStack OpenCards;

   @Property( name = PROPERTY_OPEN_CARDS )
   public boolean setOpenCards (PlayingStack value)
   {
      boolean changed = false;

      if (this.OpenCards != value)
      {
      
         PlayingStack oldValue = this.OpenCards;
         this.OpenCards = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPEN_CARDS )
   public ScenarioTest withOpenCards (PlayingStack value)
   {
      setOpenCards (value);
      return this;
   }

   public PlayingStack getOpenCards ()
   {
      return this.OpenCards;
   }

   /**
    * <pre>
    *           0..1     object_S10     0..1
    * ScenarioTest ------------------------> Card
    *           test               S10
    * </pre>
    */
   public static final String PROPERTY_S10 = "S10";

   @Property( name = PROPERTY_S10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card S10;

   @Property( name = PROPERTY_S10 )
   public boolean setS10 (Card value)
   {
      boolean changed = false;

      if (this.S10 != value)
      {
      
         Card oldValue = this.S10;
         this.S10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_S10 )
   public ScenarioTest withS10 (Card value)
   {
      setS10 (value);
      return this;
   }

   public Card getS10 ()
   {
      return this.S10;
   }

   /**
    * <pre>
    *           0..1     object_SA     0..1
    * ScenarioTest ------------------------> Card
    *           test               SA
    * </pre>
    */
   public static final String PROPERTY_SA = "SA";

   @Property( name = PROPERTY_SA, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card SA;

   @Property( name = PROPERTY_SA )
   public boolean setSA (Card value)
   {
      boolean changed = false;

      if (this.SA != value)
      {
      
         Card oldValue = this.SA;
         this.SA = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SA )
   public ScenarioTest withSA (Card value)
   {
      setSA (value);
      return this;
   }

   public Card getSA ()
   {
      return this.SA;
   }

   /**
    * <pre>
    *           0..1     object_Turn     0..1
    * ScenarioTest ------------------------> Turn
    *           test               Turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "Turn";

   @Property( name = PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn Turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.Turn != value)
      {
      
         Turn oldValue = this.Turn;
         this.Turn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public ScenarioTest withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.Turn;
   }

   /**
    * <pre>
    *           0..1     object_Ulno     0..1
    * ScenarioTest ------------------------> Player
    *           test               Ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "Ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (Player value)
   {
      boolean changed = false;

      if (this.Ulno != value)
      {
      
         Player oldValue = this.Ulno;
         this.Ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public ScenarioTest withUlno (Player value)
   {
      setUlno (value);
      return this;
   }

   public Player getUlno ()
   {
      return this.Ulno;
   }

   public void assertStep1 ()
   {
      boolean fujaba__Success = false;
      Suit D = null;

      // // result situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object Artjom is really bound
         JavaSDM.ensure ( Artjom != null, "check object Artjom is really bound" );
         // check object C10 is really bound
         JavaSDM.ensure ( C10 != null, "check object C10 is really bound" );
         // check object D8 is really bound
         JavaSDM.ensure ( D8 != null, "check object D8 is really bound" );
         // check object DK is really bound
         JavaSDM.ensure ( DK != null, "check object DK is really bound" );
         // check object Eero is really bound
         JavaSDM.ensure ( Eero != null, "check object Eero is really bound" );
         // check object H8 is really bound
         JavaSDM.ensure ( H8 != null, "check object H8 is really bound" );
         // check object HJ is really bound
         JavaSDM.ensure ( HJ != null, "check object HJ is really bound" );
         // check object HQ is really bound
         JavaSDM.ensure ( HQ != null, "check object HQ is really bound" );
         // check object OpenCards is really bound
         JavaSDM.ensure ( OpenCards != null, "check object OpenCards is really bound" );
         // check object S10 is really bound
         JavaSDM.ensure ( S10 != null, "check object S10 is really bound" );
         // check object Turn is really bound
         JavaSDM.ensure ( Turn != null, "check object Turn is really bound" );
         // check object Ulno is really bound
         JavaSDM.ensure ( Ulno != null, "check object Ulno is really bound" );
         // check isomorphic binding between objects Eero and Artjom
         JavaSDM.ensure ( !Eero.equals (Artjom), "check isomorphic binding between objects Eero and Artjom" );

         // check isomorphic binding between objects Ulno and Artjom
         JavaSDM.ensure ( !Ulno.equals (Artjom), "check isomorphic binding between objects Ulno and Artjom" );

         // check isomorphic binding between objects D8 and C10
         JavaSDM.ensure ( !D8.equals (C10), "check isomorphic binding between objects D8 and C10" );

         // check isomorphic binding between objects DK and C10
         JavaSDM.ensure ( !DK.equals (C10), "check isomorphic binding between objects DK and C10" );

         // check isomorphic binding between objects H8 and C10
         JavaSDM.ensure ( !H8.equals (C10), "check isomorphic binding between objects H8 and C10" );

         // check isomorphic binding between objects HJ and C10
         JavaSDM.ensure ( !HJ.equals (C10), "check isomorphic binding between objects HJ and C10" );

         // check isomorphic binding between objects HQ and C10
         JavaSDM.ensure ( !HQ.equals (C10), "check isomorphic binding between objects HQ and C10" );

         // check isomorphic binding between objects S10 and C10
         JavaSDM.ensure ( !S10.equals (C10), "check isomorphic binding between objects S10 and C10" );

         // check isomorphic binding between objects DK and D8
         JavaSDM.ensure ( !DK.equals (D8), "check isomorphic binding between objects DK and D8" );

         // check isomorphic binding between objects H8 and D8
         JavaSDM.ensure ( !H8.equals (D8), "check isomorphic binding between objects H8 and D8" );

         // check isomorphic binding between objects HJ and D8
         JavaSDM.ensure ( !HJ.equals (D8), "check isomorphic binding between objects HJ and D8" );

         // check isomorphic binding between objects HQ and D8
         JavaSDM.ensure ( !HQ.equals (D8), "check isomorphic binding between objects HQ and D8" );

         // check isomorphic binding between objects S10 and D8
         JavaSDM.ensure ( !S10.equals (D8), "check isomorphic binding between objects S10 and D8" );

         // check isomorphic binding between objects H8 and DK
         JavaSDM.ensure ( !H8.equals (DK), "check isomorphic binding between objects H8 and DK" );

         // check isomorphic binding between objects HJ and DK
         JavaSDM.ensure ( !HJ.equals (DK), "check isomorphic binding between objects HJ and DK" );

         // check isomorphic binding between objects HQ and DK
         JavaSDM.ensure ( !HQ.equals (DK), "check isomorphic binding between objects HQ and DK" );

         // check isomorphic binding between objects S10 and DK
         JavaSDM.ensure ( !S10.equals (DK), "check isomorphic binding between objects S10 and DK" );

         // check isomorphic binding between objects Ulno and Eero
         JavaSDM.ensure ( !Ulno.equals (Eero), "check isomorphic binding between objects Ulno and Eero" );

         // check isomorphic binding between objects HJ and H8
         JavaSDM.ensure ( !HJ.equals (H8), "check isomorphic binding between objects HJ and H8" );

         // check isomorphic binding between objects HQ and H8
         JavaSDM.ensure ( !HQ.equals (H8), "check isomorphic binding between objects HQ and H8" );

         // check isomorphic binding between objects S10 and H8
         JavaSDM.ensure ( !S10.equals (H8), "check isomorphic binding between objects S10 and H8" );

         // check isomorphic binding between objects HQ and HJ
         JavaSDM.ensure ( !HQ.equals (HJ), "check isomorphic binding between objects HQ and HJ" );

         // check isomorphic binding between objects S10 and HJ
         JavaSDM.ensure ( !S10.equals (HJ), "check isomorphic binding between objects S10 and HJ" );

         // check isomorphic binding between objects S10 and HQ
         JavaSDM.ensure ( !S10.equals (HQ), "check isomorphic binding between objects S10 and HQ" );

         // search to-one link change suit to from HJ to D
         D = HJ.getSuit2 ();

         // check object D is really bound
         JavaSDM.ensure ( D != null, "check object D is really bound" );


         // check link followed by from C10 to D8
         JavaSDM.ensure (D8.equals (C10.getCard2 ()), "check link followed by from C10 to D8");

         // check link followed by from HJ to H8
         JavaSDM.ensure (H8.equals (HJ.getCard2 ()), "check link followed by from HJ to H8");

         // check link followed by from S10 to HQ
         JavaSDM.ensure (HQ.equals (S10.getCard2 ()), "check link followed by from S10 to HQ");

         // check link has hand from D8 to Artjom
         JavaSDM.ensure (Artjom.equals (D8.getPlayer ()), "check link has hand from D8 to Artjom");

         // check link has hand from HQ to Eero
         JavaSDM.ensure (Eero.equals (HQ.getPlayer ()), "check link has hand from HQ to Eero");

         // check link has hand from DK to Ulno
         JavaSDM.ensure (Ulno.equals (DK.getPlayer ()), "check link has hand from DK to Ulno");

         // check link has top from HJ to OpenCards
         JavaSDM.ensure (OpenCards.equals (HJ.getStack ()), "check link has top from HJ to OpenCards");

         // check link has from Turn to Artjom
         JavaSDM.ensure (Artjom.equals (Turn.getPlayer ()), "check link has from Turn to Artjom");

         // check link right of from Eero to Artjom
         JavaSDM.ensure (Artjom.equals (Eero.getP1 ()), "check link right of from Eero to Artjom");

         // check link right of from Ulno to Eero
         JavaSDM.ensure (Eero.equals (Ulno.getP1 ()), "check link right of from Ulno to Eero");

         // check link right of from Ulno to Artjom
         JavaSDM.ensure (Artjom.equals (Ulno.getP2 ()), "check link right of from Ulno to Artjom");

         // create link object_D from this to D
         this.setD (D);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Player Ulno = null;
      Player Artjom = null;
      Turn Turn = null;
      Card DK = null;
      Player Eero = null;
      Card D8 = null;
      Card HQ = null;
      Card HJ = null;
      Card S10 = null;
      Card C10 = null;
      DrawingStack Deck = null;
      Card SA = null;
      PlayingStack OpenCards = null;
      Card H8 = null;

      // // start situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object Ulno
         Ulno = new Player ( );

         // create object Artjom
         Artjom = new Player ( );

         // create object Turn
         Turn = new Turn ( );

         // create object DK
         DK = new Card ( );

         // create object Eero
         Eero = new Player ( );

         // create object D8
         D8 = new Card ( );

         // create object HQ
         HQ = new Card ( );

         // create object HJ
         HJ = new Card ( );

         // create object S10
         S10 = new Card ( );

         // create object C10
         C10 = new Card ( );

         // create object Deck
         Deck = new DrawingStack ( );

         // create object SA
         SA = new Card ( );

         // create object OpenCards
         OpenCards = new PlayingStack ( );

         // create object H8
         H8 = new Card ( );

         // create link right of from Artjom to Ulno
         Artjom.setP1 (Ulno);

         // create link has from Turn to Ulno
         Turn.setPlayer (Ulno);

         // create link has hand from DK to Ulno
         DK.setPlayer (Ulno);

         // create link right of from Eero to Ulno
         Eero.setP2 (Ulno);

         // create link object_Ulno from this to Ulno
         this.setUlno (Ulno);

         // create link right of from Eero to Artjom
         Eero.setP1 (Artjom);

         // create link has hand from D8 to Artjom
         D8.setPlayer (Artjom);

         // create link object_Artjom from this to Artjom
         this.setArtjom (Artjom);

         // create link has hand from HQ to Eero
         HQ.setPlayer (Eero);

         // create link object_Eero from this to Eero
         this.setEero (Eero);

         // create link object_Turn from this to Turn
         this.setTurn (Turn);

         // create link followed by from HJ to DK
         HJ.setCard2 (DK);

         // create link object_DK from this to DK
         this.setDK (DK);

         // create link followed by from S10 to HQ
         S10.setCard2 (HQ);

         // create link object_HQ from this to HQ
         this.setHQ (HQ);

         // create link followed by from C10 to D8
         C10.setCard2 (D8);

         // create link object_D8 from this to D8
         this.setD8 (D8);

         // create link has top from SA to Deck
         SA.setStack (Deck);

         // create link object_Deck from this to Deck
         this.setDeck (Deck);

         // create link object_SA from this to SA
         this.setSA (SA);

         // create link has top from H8 to OpenCards
         H8.setStack (OpenCards);

         // create link object_OpenCards from this to OpenCards
         this.setOpenCards (OpenCards);

         // create link object_H8 from this to H8
         this.setH8 (H8);

         // create link object_HJ from this to HJ
         this.setHJ (HJ);

         // create link object_S10 from this to S10
         this.setS10 (S10);

         // create link object_C10 from this to C10
         this.setC10 (C10);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testScenario ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void removeYou()
   {
      this.setArtjom (null);
      this.setC10 (null);
      this.setD8 (null);
      this.setDK (null);
      this.setD (null);
      this.setDeck (null);
      this.setEero (null);
      this.setH8 (null);
      this.setHJ (null);
      this.setHQ (null);
      this.setOpenCards (null);
      this.setS10 (null);
      this.setSA (null);
      this.setTurn (null);
      this.setUlno (null);
   }
}


