/*
 * generated by Fujaba - CodeGen2
 */
import maumau.Player;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import maumau.Card;
import maumau.DrawingStack;
import maumau.PlayingStack;
import maumau.Turn;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import junit.framework.TestCase;


public class Scenario_2Test extends TestCase
{



   /**
    * <pre>
    *           0..1     object_Artjom     0..1
    * Scenario_2Test ------------------------> Player
    *           test               Artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "Artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (Player value)
   {
      boolean changed = false;

      if (this.Artjom != value)
      {
      
         Player oldValue = this.Artjom;
         this.Artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public Scenario_2Test withArtjom (Player value)
   {
      setArtjom (value);
      return this;
   }

   public Player getArtjom ()
   {
      return this.Artjom;
   }

   /**
    * <pre>
    *           0..1     object_C8     0..1
    * Scenario_2Test ------------------------> Card
    *           test               C8
    * </pre>
    */
   public static final String PROPERTY_C8 = "C8";

   @Property( name = PROPERTY_C8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card C8;

   @Property( name = PROPERTY_C8 )
   public boolean setC8 (Card value)
   {
      boolean changed = false;

      if (this.C8 != value)
      {
      
         Card oldValue = this.C8;
         this.C8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_C8 )
   public Scenario_2Test withC8 (Card value)
   {
      setC8 (value);
      return this;
   }

   public Card getC8 ()
   {
      return this.C8;
   }

   /**
    * <pre>
    *           0..1     object_CA     0..1
    * Scenario_2Test ------------------------> Card
    *           test               CA
    * </pre>
    */
   public static final String PROPERTY_CA = "CA";

   @Property( name = PROPERTY_CA, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card CA;

   @Property( name = PROPERTY_CA )
   public boolean setCA (Card value)
   {
      boolean changed = false;

      if (this.CA != value)
      {
      
         Card oldValue = this.CA;
         this.CA = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CA )
   public Scenario_2Test withCA (Card value)
   {
      setCA (value);
      return this;
   }

   public Card getCA ()
   {
      return this.CA;
   }

   /**
    * <pre>
    *           0..1     object_D10     0..1
    * Scenario_2Test ------------------------> Card
    *           test               D10
    * </pre>
    */
   public static final String PROPERTY_D10 = "D10";

   @Property( name = PROPERTY_D10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D10;

   @Property( name = PROPERTY_D10 )
   public boolean setD10 (Card value)
   {
      boolean changed = false;

      if (this.D10 != value)
      {
      
         Card oldValue = this.D10;
         this.D10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D10 )
   public Scenario_2Test withD10 (Card value)
   {
      setD10 (value);
      return this;
   }

   public Card getD10 ()
   {
      return this.D10;
   }

   /**
    * <pre>
    *           0..1     object_D9     0..1
    * Scenario_2Test ------------------------> Card
    *           test               D9
    * </pre>
    */
   public static final String PROPERTY_D9 = "D9";

   @Property( name = PROPERTY_D9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D9;

   @Property( name = PROPERTY_D9 )
   public boolean setD9 (Card value)
   {
      boolean changed = false;

      if (this.D9 != value)
      {
      
         Card oldValue = this.D9;
         this.D9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D9 )
   public Scenario_2Test withD9 (Card value)
   {
      setD9 (value);
      return this;
   }

   public Card getD9 ()
   {
      return this.D9;
   }

   /**
    * <pre>
    *           0..1     object_DJ     0..1
    * Scenario_2Test ------------------------> Card
    *           test               DJ
    * </pre>
    */
   public static final String PROPERTY_DJ = "DJ";

   @Property( name = PROPERTY_DJ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DJ;

   @Property( name = PROPERTY_DJ )
   public boolean setDJ (Card value)
   {
      boolean changed = false;

      if (this.DJ != value)
      {
      
         Card oldValue = this.DJ;
         this.DJ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DJ )
   public Scenario_2Test withDJ (Card value)
   {
      setDJ (value);
      return this;
   }

   public Card getDJ ()
   {
      return this.DJ;
   }

   /**
    * <pre>
    *           0..1     object_DK     0..1
    * Scenario_2Test ------------------------> Card
    *           test               DK
    * </pre>
    */
   public static final String PROPERTY_DK = "DK";

   @Property( name = PROPERTY_DK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DK;

   @Property( name = PROPERTY_DK )
   public boolean setDK (Card value)
   {
      boolean changed = false;

      if (this.DK != value)
      {
      
         Card oldValue = this.DK;
         this.DK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DK )
   public Scenario_2Test withDK (Card value)
   {
      setDK (value);
      return this;
   }

   public Card getDK ()
   {
      return this.DK;
   }

   /**
    * <pre>
    *           0..1     object_DQ     0..1
    * Scenario_2Test ------------------------> Card
    *           test               DQ
    * </pre>
    */
   public static final String PROPERTY_DQ = "DQ";

   @Property( name = PROPERTY_DQ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DQ;

   @Property( name = PROPERTY_DQ )
   public boolean setDQ (Card value)
   {
      boolean changed = false;

      if (this.DQ != value)
      {
      
         Card oldValue = this.DQ;
         this.DQ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DQ )
   public Scenario_2Test withDQ (Card value)
   {
      setDQ (value);
      return this;
   }

   public Card getDQ ()
   {
      return this.DQ;
   }

   /**
    * <pre>
    *           0..1     object_DrawingStack     0..1
    * Scenario_2Test ------------------------> DrawingStack
    *           test               DrawingStack
    * </pre>
    */
   public static final String PROPERTY_DRAWING_STACK = "DrawingStack";

   @Property( name = PROPERTY_DRAWING_STACK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private DrawingStack DrawingStack;

   @Property( name = PROPERTY_DRAWING_STACK )
   public boolean setDrawingStack (DrawingStack value)
   {
      boolean changed = false;

      if (this.DrawingStack != value)
      {
      
         DrawingStack oldValue = this.DrawingStack;
         this.DrawingStack = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DRAWING_STACK )
   public Scenario_2Test withDrawingStack (DrawingStack value)
   {
      setDrawingStack (value);
      return this;
   }

   public DrawingStack getDrawingStack ()
   {
      return this.DrawingStack;
   }

   /**
    * <pre>
    *           0..1     object_Eero     0..1
    * Scenario_2Test ------------------------> Player
    *           test               Eero
    * </pre>
    */
   public static final String PROPERTY_EERO = "Eero";

   @Property( name = PROPERTY_EERO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Eero;

   @Property( name = PROPERTY_EERO )
   public boolean setEero (Player value)
   {
      boolean changed = false;

      if (this.Eero != value)
      {
      
         Player oldValue = this.Eero;
         this.Eero = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_EERO )
   public Scenario_2Test withEero (Player value)
   {
      setEero (value);
      return this;
   }

   public Player getEero ()
   {
      return this.Eero;
   }

   /**
    * <pre>
    *           0..1     object_H10     0..1
    * Scenario_2Test ------------------------> Card
    *           test               H10
    * </pre>
    */
   public static final String PROPERTY_H10 = "H10";

   @Property( name = PROPERTY_H10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H10;

   @Property( name = PROPERTY_H10 )
   public boolean setH10 (Card value)
   {
      boolean changed = false;

      if (this.H10 != value)
      {
      
         Card oldValue = this.H10;
         this.H10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H10 )
   public Scenario_2Test withH10 (Card value)
   {
      setH10 (value);
      return this;
   }

   public Card getH10 ()
   {
      return this.H10;
   }

   /**
    * <pre>
    *           0..1     object_H7     0..1
    * Scenario_2Test ------------------------> Card
    *           test               H7
    * </pre>
    */
   public static final String PROPERTY_H7 = "H7";

   @Property( name = PROPERTY_H7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H7;

   @Property( name = PROPERTY_H7 )
   public boolean setH7 (Card value)
   {
      boolean changed = false;

      if (this.H7 != value)
      {
      
         Card oldValue = this.H7;
         this.H7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H7 )
   public Scenario_2Test withH7 (Card value)
   {
      setH7 (value);
      return this;
   }

   public Card getH7 ()
   {
      return this.H7;
   }

   /**
    * <pre>
    *           0..1     object_HA     0..1
    * Scenario_2Test ------------------------> Card
    *           test               HA
    * </pre>
    */
   public static final String PROPERTY_HA = "HA";

   @Property( name = PROPERTY_HA, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HA;

   @Property( name = PROPERTY_HA )
   public boolean setHA (Card value)
   {
      boolean changed = false;

      if (this.HA != value)
      {
      
         Card oldValue = this.HA;
         this.HA = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HA )
   public Scenario_2Test withHA (Card value)
   {
      setHA (value);
      return this;
   }

   public Card getHA ()
   {
      return this.HA;
   }

   /**
    * <pre>
    *           0..1     object_HK     0..1
    * Scenario_2Test ------------------------> Card
    *           test               HK
    * </pre>
    */
   public static final String PROPERTY_HK = "HK";

   @Property( name = PROPERTY_HK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HK;

   @Property( name = PROPERTY_HK )
   public boolean setHK (Card value)
   {
      boolean changed = false;

      if (this.HK != value)
      {
      
         Card oldValue = this.HK;
         this.HK = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HK )
   public Scenario_2Test withHK (Card value)
   {
      setHK (value);
      return this;
   }

   public Card getHK ()
   {
      return this.HK;
   }

   /**
    * <pre>
    *           0..1     object_HQ     0..1
    * Scenario_2Test ------------------------> Card
    *           test               HQ
    * </pre>
    */
   public static final String PROPERTY_HQ = "HQ";

   @Property( name = PROPERTY_HQ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HQ;

   @Property( name = PROPERTY_HQ )
   public boolean setHQ (Card value)
   {
      boolean changed = false;

      if (this.HQ != value)
      {
      
         Card oldValue = this.HQ;
         this.HQ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HQ )
   public Scenario_2Test withHQ (Card value)
   {
      setHQ (value);
      return this;
   }

   public Card getHQ ()
   {
      return this.HQ;
   }

   /**
    * <pre>
    *           0..1     object_OpenDeck     0..1
    * Scenario_2Test ------------------------> PlayingStack
    *           test               OpenDeck
    * </pre>
    */
   public static final String PROPERTY_OPEN_DECK = "OpenDeck";

   @Property( name = PROPERTY_OPEN_DECK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private PlayingStack OpenDeck;

   @Property( name = PROPERTY_OPEN_DECK )
   public boolean setOpenDeck (PlayingStack value)
   {
      boolean changed = false;

      if (this.OpenDeck != value)
      {
      
         PlayingStack oldValue = this.OpenDeck;
         this.OpenDeck = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPEN_DECK )
   public Scenario_2Test withOpenDeck (PlayingStack value)
   {
      setOpenDeck (value);
      return this;
   }

   public PlayingStack getOpenDeck ()
   {
      return this.OpenDeck;
   }

   /**
    * <pre>
    *           0..1     object_Turn     0..1
    * Scenario_2Test ------------------------> Turn
    *           test               Turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "Turn";

   @Property( name = PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn Turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.Turn != value)
      {
      
         Turn oldValue = this.Turn;
         this.Turn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Scenario_2Test withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.Turn;
   }

   /**
    * <pre>
    *           0..1     object_Ulno     0..1
    * Scenario_2Test ------------------------> Player
    *           test               Ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "Ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (Player value)
   {
      boolean changed = false;

      if (this.Ulno != value)
      {
      
         Player oldValue = this.Ulno;
         this.Ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public Scenario_2Test withUlno (Player value)
   {
      setUlno (value);
      return this;
   }

   public Player getUlno ()
   {
      return this.Ulno;
   }

   public void assertStep1 ()
   {
      boolean fujaba__Success = false;
      Card D9 = null;
      Card D10 = null;
      Card DQ = null;

      // // result situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object Artjom is really bound
         JavaSDM.ensure ( Artjom != null, "check object Artjom is really bound" );
         // check object CA is really bound
         JavaSDM.ensure ( CA != null, "check object CA is really bound" );
         // check object DK is really bound
         JavaSDM.ensure ( DK != null, "check object DK is really bound" );
         // check object DrawingStack is really bound
         JavaSDM.ensure ( DrawingStack != null, "check object DrawingStack is really bound" );
         // check object Eero is really bound
         JavaSDM.ensure ( Eero != null, "check object Eero is really bound" );
         // check object H7 is really bound
         JavaSDM.ensure ( H7 != null, "check object H7 is really bound" );
         // check object HA is really bound
         JavaSDM.ensure ( HA != null, "check object HA is really bound" );
         // check object HK is really bound
         JavaSDM.ensure ( HK != null, "check object HK is really bound" );
         // check object HQ is really bound
         JavaSDM.ensure ( HQ != null, "check object HQ is really bound" );
         // check object OpenDeck is really bound
         JavaSDM.ensure ( OpenDeck != null, "check object OpenDeck is really bound" );
         // check object Turn is really bound
         JavaSDM.ensure ( Turn != null, "check object Turn is really bound" );
         // check object Ulno is really bound
         JavaSDM.ensure ( Ulno != null, "check object Ulno is really bound" );
         // check isomorphic binding between objects Eero and Artjom
         JavaSDM.ensure ( !Eero.equals (Artjom), "check isomorphic binding between objects Eero and Artjom" );

         // check isomorphic binding between objects Ulno and Artjom
         JavaSDM.ensure ( !Ulno.equals (Artjom), "check isomorphic binding between objects Ulno and Artjom" );

         // check isomorphic binding between objects DK and CA
         JavaSDM.ensure ( !DK.equals (CA), "check isomorphic binding between objects DK and CA" );

         // check isomorphic binding between objects H7 and CA
         JavaSDM.ensure ( !H7.equals (CA), "check isomorphic binding between objects H7 and CA" );

         // check isomorphic binding between objects HA and CA
         JavaSDM.ensure ( !HA.equals (CA), "check isomorphic binding between objects HA and CA" );

         // check isomorphic binding between objects HK and CA
         JavaSDM.ensure ( !HK.equals (CA), "check isomorphic binding between objects HK and CA" );

         // check isomorphic binding between objects HQ and CA
         JavaSDM.ensure ( !HQ.equals (CA), "check isomorphic binding between objects HQ and CA" );

         // check isomorphic binding between objects H7 and DK
         JavaSDM.ensure ( !H7.equals (DK), "check isomorphic binding between objects H7 and DK" );

         // check isomorphic binding between objects HA and DK
         JavaSDM.ensure ( !HA.equals (DK), "check isomorphic binding between objects HA and DK" );

         // check isomorphic binding between objects HK and DK
         JavaSDM.ensure ( !HK.equals (DK), "check isomorphic binding between objects HK and DK" );

         // check isomorphic binding between objects HQ and DK
         JavaSDM.ensure ( !HQ.equals (DK), "check isomorphic binding between objects HQ and DK" );

         // check isomorphic binding between objects Ulno and Eero
         JavaSDM.ensure ( !Ulno.equals (Eero), "check isomorphic binding between objects Ulno and Eero" );

         // check isomorphic binding between objects HA and H7
         JavaSDM.ensure ( !HA.equals (H7), "check isomorphic binding between objects HA and H7" );

         // check isomorphic binding between objects HK and H7
         JavaSDM.ensure ( !HK.equals (H7), "check isomorphic binding between objects HK and H7" );

         // check isomorphic binding between objects HQ and H7
         JavaSDM.ensure ( !HQ.equals (H7), "check isomorphic binding between objects HQ and H7" );

         // check isomorphic binding between objects HK and HA
         JavaSDM.ensure ( !HK.equals (HA), "check isomorphic binding between objects HK and HA" );

         // check isomorphic binding between objects HQ and HA
         JavaSDM.ensure ( !HQ.equals (HA), "check isomorphic binding between objects HQ and HA" );

         // check isomorphic binding between objects HQ and HK
         JavaSDM.ensure ( !HQ.equals (HK), "check isomorphic binding between objects HQ and HK" );

         // check link followed by from H7 to HA
         JavaSDM.ensure (HA.equals (H7.getCard2 ()), "check link followed by from H7 to HA");

         // check link followed by from HQ to HK
         JavaSDM.ensure (HK.equals (HQ.getCard2 ()), "check link followed by from HQ to HK");

         // check link has hand from HK to Eero
         JavaSDM.ensure (Eero.equals (HK.getPlayer ()), "check link has hand from HK to Eero");

         // check link has hand from CA to Ulno
         JavaSDM.ensure (Ulno.equals (CA.getPlayer ()), "check link has hand from CA to Ulno");

         // check link has top from DK to DrawingStack
         JavaSDM.ensure (DrawingStack.equals (DK.getStack ()), "check link has top from DK to DrawingStack");

         // check link has top from H7 to OpenDeck
         JavaSDM.ensure (OpenDeck.equals (H7.getStack ()), "check link has top from H7 to OpenDeck");

         // check link has from Turn to Artjom
         JavaSDM.ensure (Artjom.equals (Turn.getPlayer ()), "check link has from Turn to Artjom");

         // check link right of from Artjom to Eero
         JavaSDM.ensure (Eero.equals (Artjom.getP2 ()), "check link right of from Artjom to Eero");

         // check link right of from Ulno to Eero
         JavaSDM.ensure (Eero.equals (Ulno.getP1 ()), "check link right of from Ulno to Eero");

         // check link right of from Artjom to Ulno
         JavaSDM.ensure (Ulno.equals (Artjom.getP1 ()), "check link right of from Artjom to Ulno");

         // search to-one link followed by from DK to DQ
         DQ = DK.getCard2 ();

         // check object DQ is really bound
         JavaSDM.ensure ( DQ != null, "check object DQ is really bound" );

         // check isomorphic binding between objects DQ and CA
         JavaSDM.ensure ( !DQ.equals (CA), "check isomorphic binding between objects DQ and CA" );

         // check isomorphic binding between objects DQ and DK
         JavaSDM.ensure ( !DQ.equals (DK), "check isomorphic binding between objects DQ and DK" );

         // check isomorphic binding between objects H7 and DQ
         JavaSDM.ensure ( !H7.equals (DQ), "check isomorphic binding between objects H7 and DQ" );

         // check isomorphic binding between objects HA and DQ
         JavaSDM.ensure ( !HA.equals (DQ), "check isomorphic binding between objects HA and DQ" );

         // check isomorphic binding between objects HK and DQ
         JavaSDM.ensure ( !HK.equals (DQ), "check isomorphic binding between objects HK and DQ" );

         // check isomorphic binding between objects HQ and DQ
         JavaSDM.ensure ( !HQ.equals (DQ), "check isomorphic binding between objects HQ and DQ" );

         // search to-one link followed by from DQ to D10
         D10 = DQ.getCard2 ();

         // check object D10 is really bound
         JavaSDM.ensure ( D10 != null, "check object D10 is really bound" );

         // check isomorphic binding between objects D10 and CA
         JavaSDM.ensure ( !D10.equals (CA), "check isomorphic binding between objects D10 and CA" );

         // check isomorphic binding between objects DK and D10
         JavaSDM.ensure ( !DK.equals (D10), "check isomorphic binding between objects DK and D10" );

         // check isomorphic binding between objects DQ and D10
         JavaSDM.ensure ( !DQ.equals (D10), "check isomorphic binding between objects DQ and D10" );

         // check isomorphic binding between objects H7 and D10
         JavaSDM.ensure ( !H7.equals (D10), "check isomorphic binding between objects H7 and D10" );

         // check isomorphic binding between objects HA and D10
         JavaSDM.ensure ( !HA.equals (D10), "check isomorphic binding between objects HA and D10" );

         // check isomorphic binding between objects HK and D10
         JavaSDM.ensure ( !HK.equals (D10), "check isomorphic binding between objects HK and D10" );

         // check isomorphic binding between objects HQ and D10
         JavaSDM.ensure ( !HQ.equals (D10), "check isomorphic binding between objects HQ and D10" );

         // search to-one link followed by from D10 to D9
         D9 = D10.getCard2 ();

         // check object D9 is really bound
         JavaSDM.ensure ( D9 != null, "check object D9 is really bound" );

         // check isomorphic binding between objects D9 and CA
         JavaSDM.ensure ( !D9.equals (CA), "check isomorphic binding between objects D9 and CA" );

         // check isomorphic binding between objects D9 and D10
         JavaSDM.ensure ( !D9.equals (D10), "check isomorphic binding between objects D9 and D10" );

         // check isomorphic binding between objects DK and D9
         JavaSDM.ensure ( !DK.equals (D9), "check isomorphic binding between objects DK and D9" );

         // check isomorphic binding between objects DQ and D9
         JavaSDM.ensure ( !DQ.equals (D9), "check isomorphic binding between objects DQ and D9" );

         // check isomorphic binding between objects H7 and D9
         JavaSDM.ensure ( !H7.equals (D9), "check isomorphic binding between objects H7 and D9" );

         // check isomorphic binding between objects HA and D9
         JavaSDM.ensure ( !HA.equals (D9), "check isomorphic binding between objects HA and D9" );

         // check isomorphic binding between objects HK and D9
         JavaSDM.ensure ( !HK.equals (D9), "check isomorphic binding between objects HK and D9" );

         // check isomorphic binding between objects HQ and D9
         JavaSDM.ensure ( !HQ.equals (D9), "check isomorphic binding between objects HQ and D9" );




         // assign attribute DQ
         DQ.setSuit ("Diamond");
         // assign attribute DQ
         DQ.setFace ("Queen");
         // assign attribute D10
         D10.setSuit ("Diamond");
         // assign attribute D10
         D10.setFace ("10");
         // assign attribute D9
         D9.setSuit ("Diamond");
         // assign attribute D9
         D9.setFace ("9");
         // create link object_DQ from this to DQ
         this.setDQ (DQ);

         // create link object_D10 from this to D10
         this.setD10 (D10);

         // create link object_D9 from this to D9
         this.setD9 (D9);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Player Eero = null;
      Player Ulno = null;
      Card HK = null;
      Player Artjom = null;
      Card CA = null;
      Turn Turn = null;
      Card DJ = null;
      Card HQ = null;
      Card H7 = null;
      PlayingStack OpenDeck = null;
      Card HA = null;
      DrawingStack DrawingStack = null;
      Card C8 = null;
      Card DK = null;
      Card H10 = null;

      // // start situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object Eero
         Eero = new Player ( );

         // create object Ulno
         Ulno = new Player ( );

         // create object HK
         HK = new Card ( );

         // create object Artjom
         Artjom = new Player ( );

         // create object CA
         CA = new Card ( );

         // create object Turn
         Turn = new Turn ( );

         // create object DJ
         DJ = new Card ( );

         // create object HQ
         HQ = new Card ( );

         // create object H7
         H7 = new Card ( );

         // create object OpenDeck
         OpenDeck = new PlayingStack ( );

         // create object HA
         HA = new Card ( );

         // create object DrawingStack
         DrawingStack = new DrawingStack ( );

         // create object C8
         C8 = new Card ( );

         // create object DK
         DK = new Card ( );

         // create object H10
         H10 = new Card ( );

         // assign attribute Eero
         Eero.setName ("Eero");
         // assign attribute Eero
         Eero.setScore (0);
         // assign attribute Ulno
         Ulno.setName ("Ulno");
         // assign attribute Ulno
         Ulno.setScore (0);
         // assign attribute Artjom
         Artjom.setName ("Artjom");
         // assign attribute Artjom
         Artjom.setScore (0);
         // assign attribute HK
         HK.setSuit ("Hearts");
         // assign attribute HK
         HK.setFace ("King");
         // assign attribute HQ
         HQ.setFace ("Queen");
         // assign attribute HQ
         HQ.setSuit ("Hearts");
         // assign attribute DJ
         DJ.setSuit ("Diamond");
         // assign attribute DJ
         DJ.setFace ("Jack");
         // assign attribute CA
         CA.setSuit ("Clubs");
         // assign attribute CA
         CA.setFace ("Ace");
         // assign attribute HA
         HA.setSuit ("Hearts");
         // assign attribute HA
         HA.setFace ("Ace");
         // assign attribute DK
         DK.setSuit ("Diamond");
         // assign attribute DK
         DK.setFace ("King");
         // assign attribute H7
         H7.setSuit ("Hearts");
         // assign attribute H7
         H7.setFace ("7");
         // assign attribute C8
         C8.setSuit ("Clubs");
         // assign attribute C8
         C8.setFace ("8");
         // assign attribute H10
         H10.setSuit ("Hearts");
         // assign attribute H10
         H10.setFace ("10");
         // create link right of from Ulno to Eero
         Ulno.setP1 (Eero);

         // create link has hand from HK to Eero
         HK.setPlayer (Eero);

         // create link right of from Artjom to Eero
         Artjom.setP2 (Eero);

         // create link object_Eero from this to Eero
         this.setEero (Eero);

         // create link right of from Artjom to Ulno
         Artjom.setP1 (Ulno);

         // create link has hand from CA to Ulno
         CA.setPlayer (Ulno);

         // create link has from Turn to Ulno
         Turn.setPlayer (Ulno);

         // create link object_Ulno from this to Ulno
         this.setUlno (Ulno);

         // create link has hand from DJ to Artjom
         DJ.setPlayer (Artjom);

         // create link object_Artjom from this to Artjom
         this.setArtjom (Artjom);

         // create link followed by from HQ to HK
         HQ.setCard2 (HK);

         // create link object_HK from this to HK
         this.setHK (HK);

         // create link object_HQ from this to HQ
         this.setHQ (HQ);

         // create link object_DJ from this to DJ
         this.setDJ (DJ);

         // create link object_Turn from this to Turn
         this.setTurn (Turn);

         // create link followed by from H7 to CA
         H7.setCard2 (CA);

         // create link object_CA from this to CA
         this.setCA (CA);

         // create link has top from HA to OpenDeck
         HA.setStack (OpenDeck);

         // create link object_OpenDeck from this to OpenDeck
         this.setOpenDeck (OpenDeck);

         // create link object_HA from this to HA
         this.setHA (HA);

         // create link has top from C8 to DrawingStack
         C8.setStack (DrawingStack);

         // create link object_DrawingStack from this to DrawingStack
         this.setDrawingStack (DrawingStack);

         // create link followed by from H10 to DK
         H10.setCard2 (DK);

         // create link object_DK from this to DK
         this.setDK (DK);

         // create link object_H7 from this to H7
         this.setH7 (H7);

         // create link followed by from H10 to C8
         H10.setCard2 (C8);

         // create link object_C8 from this to C8
         this.setC8 (C8);

         // create link object_H10 from this to H10
         this.setH10 (H10);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testScenario_2 ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void removeYou()
   {
      this.setArtjom (null);
      this.setC8 (null);
      this.setCA (null);
      this.setD10 (null);
      this.setD9 (null);
      this.setDJ (null);
      this.setDK (null);
      this.setDQ (null);
      this.setDrawingStack (null);
      this.setEero (null);
      this.setH10 (null);
      this.setH7 (null);
      this.setHA (null);
      this.setHK (null);
      this.setHQ (null);
      this.setOpenDeck (null);
      this.setTurn (null);
      this.setUlno (null);
   }
}


