/*
 * generated by Fujaba - CodeGen2
 */
import maumau.Player;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import maumau.Card;
import maumau.PlayingStack;
import maumau.DrawingStack;
import maumau.Turn;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import junit.framework.TestCase;


public class Scenario_1Test extends TestCase
{



   /**
    * <pre>
    *           0..1     object_Artjom     0..1
    * Scenario_1Test ------------------------> Player
    *           test               Artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "Artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (Player value)
   {
      boolean changed = false;

      if (this.Artjom != value)
      {
      
         Player oldValue = this.Artjom;
         this.Artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public Scenario_1Test withArtjom (Player value)
   {
      setArtjom (value);
      return this;
   }

   public Player getArtjom ()
   {
      return this.Artjom;
   }

   /**
    * <pre>
    *           0..1     object_C10     0..1
    * Scenario_1Test ------------------------> Card
    *           test               C10
    * </pre>
    */
   public static final String PROPERTY_C10 = "C10";

   @Property( name = PROPERTY_C10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card C10;

   @Property( name = PROPERTY_C10 )
   public boolean setC10 (Card value)
   {
      boolean changed = false;

      if (this.C10 != value)
      {
      
         Card oldValue = this.C10;
         this.C10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_C10 )
   public Scenario_1Test withC10 (Card value)
   {
      setC10 (value);
      return this;
   }

   public Card getC10 ()
   {
      return this.C10;
   }

   /**
    * <pre>
    *           0..1     object_D7     0..1
    * Scenario_1Test ------------------------> Card
    *           test               D7
    * </pre>
    */
   public static final String PROPERTY_D7 = "D7";

   @Property( name = PROPERTY_D7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D7;

   @Property( name = PROPERTY_D7 )
   public boolean setD7 (Card value)
   {
      boolean changed = false;

      if (this.D7 != value)
      {
      
         Card oldValue = this.D7;
         this.D7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D7 )
   public Scenario_1Test withD7 (Card value)
   {
      setD7 (value);
      return this;
   }

   public Card getD7 ()
   {
      return this.D7;
   }

   /**
    * <pre>
    *           0..1     object_D8     0..1
    * Scenario_1Test ------------------------> Card
    *           test               D8
    * </pre>
    */
   public static final String PROPERTY_D8 = "D8";

   @Property( name = PROPERTY_D8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card D8;

   @Property( name = PROPERTY_D8 )
   public boolean setD8 (Card value)
   {
      boolean changed = false;

      if (this.D8 != value)
      {
      
         Card oldValue = this.D8;
         this.D8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_D8 )
   public Scenario_1Test withD8 (Card value)
   {
      setD8 (value);
      return this;
   }

   public Card getD8 ()
   {
      return this.D8;
   }

   /**
    * <pre>
    *           0..1     object_DA     0..1
    * Scenario_1Test ------------------------> Card
    *           test               DA
    * </pre>
    */
   public static final String PROPERTY_DA = "DA";

   @Property( name = PROPERTY_DA, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card DA;

   @Property( name = PROPERTY_DA )
   public boolean setDA (Card value)
   {
      boolean changed = false;

      if (this.DA != value)
      {
      
         Card oldValue = this.DA;
         this.DA = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_DA )
   public Scenario_1Test withDA (Card value)
   {
      setDA (value);
      return this;
   }

   public Card getDA ()
   {
      return this.DA;
   }

   /**
    * <pre>
    *           0..1     object_Eero     0..1
    * Scenario_1Test ------------------------> Player
    *           test               Eero
    * </pre>
    */
   public static final String PROPERTY_EERO = "Eero";

   @Property( name = PROPERTY_EERO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Eero;

   @Property( name = PROPERTY_EERO )
   public boolean setEero (Player value)
   {
      boolean changed = false;

      if (this.Eero != value)
      {
      
         Player oldValue = this.Eero;
         this.Eero = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_EERO )
   public Scenario_1Test withEero (Player value)
   {
      setEero (value);
      return this;
   }

   public Player getEero ()
   {
      return this.Eero;
   }

   /**
    * <pre>
    *           0..1     object_H8     0..1
    * Scenario_1Test ------------------------> Card
    *           test               H8
    * </pre>
    */
   public static final String PROPERTY_H8 = "H8";

   @Property( name = PROPERTY_H8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H8;

   @Property( name = PROPERTY_H8 )
   public boolean setH8 (Card value)
   {
      boolean changed = false;

      if (this.H8 != value)
      {
      
         Card oldValue = this.H8;
         this.H8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H8 )
   public Scenario_1Test withH8 (Card value)
   {
      setH8 (value);
      return this;
   }

   public Card getH8 ()
   {
      return this.H8;
   }

   /**
    * <pre>
    *           0..1     object_H9     0..1
    * Scenario_1Test ------------------------> Card
    *           test               H9
    * </pre>
    */
   public static final String PROPERTY_H9 = "H9";

   @Property( name = PROPERTY_H9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card H9;

   @Property( name = PROPERTY_H9 )
   public boolean setH9 (Card value)
   {
      boolean changed = false;

      if (this.H9 != value)
      {
      
         Card oldValue = this.H9;
         this.H9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_H9 )
   public Scenario_1Test withH9 (Card value)
   {
      setH9 (value);
      return this;
   }

   public Card getH9 ()
   {
      return this.H9;
   }

   /**
    * <pre>
    *           0..1     object_HQ     0..1
    * Scenario_1Test ------------------------> Card
    *           test               HQ
    * </pre>
    */
   public static final String PROPERTY_HQ = "HQ";

   @Property( name = PROPERTY_HQ, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card HQ;

   @Property( name = PROPERTY_HQ )
   public boolean setHQ (Card value)
   {
      boolean changed = false;

      if (this.HQ != value)
      {
      
         Card oldValue = this.HQ;
         this.HQ = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_HQ )
   public Scenario_1Test withHQ (Card value)
   {
      setHQ (value);
      return this;
   }

   public Card getHQ ()
   {
      return this.HQ;
   }

   /**
    * <pre>
    *           0..1     object_OpenCards     0..1
    * Scenario_1Test ------------------------> PlayingStack
    *           test               OpenCards
    * </pre>
    */
   public static final String PROPERTY_OPEN_CARDS = "OpenCards";

   @Property( name = PROPERTY_OPEN_CARDS, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private PlayingStack OpenCards;

   @Property( name = PROPERTY_OPEN_CARDS )
   public boolean setOpenCards (PlayingStack value)
   {
      boolean changed = false;

      if (this.OpenCards != value)
      {
      
         PlayingStack oldValue = this.OpenCards;
         this.OpenCards = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPEN_CARDS )
   public Scenario_1Test withOpenCards (PlayingStack value)
   {
      setOpenCards (value);
      return this;
   }

   public PlayingStack getOpenCards ()
   {
      return this.OpenCards;
   }

   /**
    * <pre>
    *           0..1     object_S7     0..1
    * Scenario_1Test ------------------------> Card
    *           test               S7
    * </pre>
    */
   public static final String PROPERTY_S7 = "S7";

   @Property( name = PROPERTY_S7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card S7;

   @Property( name = PROPERTY_S7 )
   public boolean setS7 (Card value)
   {
      boolean changed = false;

      if (this.S7 != value)
      {
      
         Card oldValue = this.S7;
         this.S7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_S7 )
   public Scenario_1Test withS7 (Card value)
   {
      setS7 (value);
      return this;
   }

   public Card getS7 ()
   {
      return this.S7;
   }

   /**
    * <pre>
    *           0..1     object_S9     0..1
    * Scenario_1Test ------------------------> Card
    *           test               S9
    * </pre>
    */
   public static final String PROPERTY_S9 = "S9";

   @Property( name = PROPERTY_S9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card S9;

   @Property( name = PROPERTY_S9 )
   public boolean setS9 (Card value)
   {
      boolean changed = false;

      if (this.S9 != value)
      {
      
         Card oldValue = this.S9;
         this.S9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_S9 )
   public Scenario_1Test withS9 (Card value)
   {
      setS9 (value);
      return this;
   }

   public Card getS9 ()
   {
      return this.S9;
   }

   /**
    * <pre>
    *           0..1     object_SA     0..1
    * Scenario_1Test ------------------------> Card
    *           test               SA
    * </pre>
    */
   public static final String PROPERTY_SA = "SA";

   @Property( name = PROPERTY_SA, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Card SA;

   @Property( name = PROPERTY_SA )
   public boolean setSA (Card value)
   {
      boolean changed = false;

      if (this.SA != value)
      {
      
         Card oldValue = this.SA;
         this.SA = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_SA )
   public Scenario_1Test withSA (Card value)
   {
      setSA (value);
      return this;
   }

   public Card getSA ()
   {
      return this.SA;
   }

   /**
    * <pre>
    *           0..1     object_Stack     0..1
    * Scenario_1Test ------------------------> DrawingStack
    *           test               Stack
    * </pre>
    */
   public static final String PROPERTY_STACK = "Stack";

   @Property( name = PROPERTY_STACK, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private DrawingStack Stack;

   @Property( name = PROPERTY_STACK )
   public boolean setStack (DrawingStack value)
   {
      boolean changed = false;

      if (this.Stack != value)
      {
      
         DrawingStack oldValue = this.Stack;
         this.Stack = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_STACK )
   public Scenario_1Test withStack (DrawingStack value)
   {
      setStack (value);
      return this;
   }

   public DrawingStack getStack ()
   {
      return this.Stack;
   }

   /**
    * <pre>
    *           0..1     object_Turn     0..1
    * Scenario_1Test ------------------------> Turn
    *           test               Turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "Turn";

   @Property( name = PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn Turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.Turn != value)
      {
      
         Turn oldValue = this.Turn;
         this.Turn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Scenario_1Test withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.Turn;
   }

   /**
    * <pre>
    *           0..1     object_Ulno     0..1
    * Scenario_1Test ------------------------> Player
    *           test               Ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "Ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player Ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (Player value)
   {
      boolean changed = false;

      if (this.Ulno != value)
      {
      
         Player oldValue = this.Ulno;
         this.Ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public Scenario_1Test withUlno (Player value)
   {
      setUlno (value);
      return this;
   }

   public Player getUlno ()
   {
      return this.Ulno;
   }

   public void assertStep1 ()
   {
      boolean fujaba__Success = false;

      // // result situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object Artjom is really bound
         JavaSDM.ensure ( Artjom != null, "check object Artjom is really bound" );
         // check object C10 is really bound
         JavaSDM.ensure ( C10 != null, "check object C10 is really bound" );
         // check object D7 is really bound
         JavaSDM.ensure ( D7 != null, "check object D7 is really bound" );
         // check object D8 is really bound
         JavaSDM.ensure ( D8 != null, "check object D8 is really bound" );
         // check object DA is really bound
         JavaSDM.ensure ( DA != null, "check object DA is really bound" );
         // check object Eero is really bound
         JavaSDM.ensure ( Eero != null, "check object Eero is really bound" );
         // check object H8 is really bound
         JavaSDM.ensure ( H8 != null, "check object H8 is really bound" );
         // check object H9 is really bound
         JavaSDM.ensure ( H9 != null, "check object H9 is really bound" );
         // check object HQ is really bound
         JavaSDM.ensure ( HQ != null, "check object HQ is really bound" );
         // check object OpenCards is really bound
         JavaSDM.ensure ( OpenCards != null, "check object OpenCards is really bound" );
         // check object S7 is really bound
         JavaSDM.ensure ( S7 != null, "check object S7 is really bound" );
         // check object S9 is really bound
         JavaSDM.ensure ( S9 != null, "check object S9 is really bound" );
         // check object SA is really bound
         JavaSDM.ensure ( SA != null, "check object SA is really bound" );
         // check object Stack is really bound
         JavaSDM.ensure ( Stack != null, "check object Stack is really bound" );
         // check object Turn is really bound
         JavaSDM.ensure ( Turn != null, "check object Turn is really bound" );
         // check object Ulno is really bound
         JavaSDM.ensure ( Ulno != null, "check object Ulno is really bound" );
         // check isomorphic binding between objects Eero and Artjom
         JavaSDM.ensure ( !Eero.equals (Artjom), "check isomorphic binding between objects Eero and Artjom" );

         // check isomorphic binding between objects Ulno and Artjom
         JavaSDM.ensure ( !Ulno.equals (Artjom), "check isomorphic binding between objects Ulno and Artjom" );

         // check isomorphic binding between objects D7 and C10
         JavaSDM.ensure ( !D7.equals (C10), "check isomorphic binding between objects D7 and C10" );

         // check isomorphic binding between objects D8 and C10
         JavaSDM.ensure ( !D8.equals (C10), "check isomorphic binding between objects D8 and C10" );

         // check isomorphic binding between objects DA and C10
         JavaSDM.ensure ( !DA.equals (C10), "check isomorphic binding between objects DA and C10" );

         // check isomorphic binding between objects H8 and C10
         JavaSDM.ensure ( !H8.equals (C10), "check isomorphic binding between objects H8 and C10" );

         // check isomorphic binding between objects H9 and C10
         JavaSDM.ensure ( !H9.equals (C10), "check isomorphic binding between objects H9 and C10" );

         // check isomorphic binding between objects HQ and C10
         JavaSDM.ensure ( !HQ.equals (C10), "check isomorphic binding between objects HQ and C10" );

         // check isomorphic binding between objects S7 and C10
         JavaSDM.ensure ( !S7.equals (C10), "check isomorphic binding between objects S7 and C10" );

         // check isomorphic binding between objects S9 and C10
         JavaSDM.ensure ( !S9.equals (C10), "check isomorphic binding between objects S9 and C10" );

         // check isomorphic binding between objects SA and C10
         JavaSDM.ensure ( !SA.equals (C10), "check isomorphic binding between objects SA and C10" );

         // check isomorphic binding between objects D8 and D7
         JavaSDM.ensure ( !D8.equals (D7), "check isomorphic binding between objects D8 and D7" );

         // check isomorphic binding between objects DA and D7
         JavaSDM.ensure ( !DA.equals (D7), "check isomorphic binding between objects DA and D7" );

         // check isomorphic binding between objects H8 and D7
         JavaSDM.ensure ( !H8.equals (D7), "check isomorphic binding between objects H8 and D7" );

         // check isomorphic binding between objects H9 and D7
         JavaSDM.ensure ( !H9.equals (D7), "check isomorphic binding between objects H9 and D7" );

         // check isomorphic binding between objects HQ and D7
         JavaSDM.ensure ( !HQ.equals (D7), "check isomorphic binding between objects HQ and D7" );

         // check isomorphic binding between objects S7 and D7
         JavaSDM.ensure ( !S7.equals (D7), "check isomorphic binding between objects S7 and D7" );

         // check isomorphic binding between objects S9 and D7
         JavaSDM.ensure ( !S9.equals (D7), "check isomorphic binding between objects S9 and D7" );

         // check isomorphic binding between objects SA and D7
         JavaSDM.ensure ( !SA.equals (D7), "check isomorphic binding between objects SA and D7" );

         // check isomorphic binding between objects DA and D8
         JavaSDM.ensure ( !DA.equals (D8), "check isomorphic binding between objects DA and D8" );

         // check isomorphic binding between objects H8 and D8
         JavaSDM.ensure ( !H8.equals (D8), "check isomorphic binding between objects H8 and D8" );

         // check isomorphic binding between objects H9 and D8
         JavaSDM.ensure ( !H9.equals (D8), "check isomorphic binding between objects H9 and D8" );

         // check isomorphic binding between objects HQ and D8
         JavaSDM.ensure ( !HQ.equals (D8), "check isomorphic binding between objects HQ and D8" );

         // check isomorphic binding between objects S7 and D8
         JavaSDM.ensure ( !S7.equals (D8), "check isomorphic binding between objects S7 and D8" );

         // check isomorphic binding between objects S9 and D8
         JavaSDM.ensure ( !S9.equals (D8), "check isomorphic binding between objects S9 and D8" );

         // check isomorphic binding between objects SA and D8
         JavaSDM.ensure ( !SA.equals (D8), "check isomorphic binding between objects SA and D8" );

         // check isomorphic binding between objects H8 and DA
         JavaSDM.ensure ( !H8.equals (DA), "check isomorphic binding between objects H8 and DA" );

         // check isomorphic binding between objects H9 and DA
         JavaSDM.ensure ( !H9.equals (DA), "check isomorphic binding between objects H9 and DA" );

         // check isomorphic binding between objects HQ and DA
         JavaSDM.ensure ( !HQ.equals (DA), "check isomorphic binding between objects HQ and DA" );

         // check isomorphic binding between objects S7 and DA
         JavaSDM.ensure ( !S7.equals (DA), "check isomorphic binding between objects S7 and DA" );

         // check isomorphic binding between objects S9 and DA
         JavaSDM.ensure ( !S9.equals (DA), "check isomorphic binding between objects S9 and DA" );

         // check isomorphic binding between objects SA and DA
         JavaSDM.ensure ( !SA.equals (DA), "check isomorphic binding between objects SA and DA" );

         // check isomorphic binding between objects Ulno and Eero
         JavaSDM.ensure ( !Ulno.equals (Eero), "check isomorphic binding between objects Ulno and Eero" );

         // check isomorphic binding between objects H9 and H8
         JavaSDM.ensure ( !H9.equals (H8), "check isomorphic binding between objects H9 and H8" );

         // check isomorphic binding between objects HQ and H8
         JavaSDM.ensure ( !HQ.equals (H8), "check isomorphic binding between objects HQ and H8" );

         // check isomorphic binding between objects S7 and H8
         JavaSDM.ensure ( !S7.equals (H8), "check isomorphic binding between objects S7 and H8" );

         // check isomorphic binding between objects S9 and H8
         JavaSDM.ensure ( !S9.equals (H8), "check isomorphic binding between objects S9 and H8" );

         // check isomorphic binding between objects SA and H8
         JavaSDM.ensure ( !SA.equals (H8), "check isomorphic binding between objects SA and H8" );

         // check isomorphic binding between objects HQ and H9
         JavaSDM.ensure ( !HQ.equals (H9), "check isomorphic binding between objects HQ and H9" );

         // check isomorphic binding between objects S7 and H9
         JavaSDM.ensure ( !S7.equals (H9), "check isomorphic binding between objects S7 and H9" );

         // check isomorphic binding between objects S9 and H9
         JavaSDM.ensure ( !S9.equals (H9), "check isomorphic binding between objects S9 and H9" );

         // check isomorphic binding between objects SA and H9
         JavaSDM.ensure ( !SA.equals (H9), "check isomorphic binding between objects SA and H9" );

         // check isomorphic binding between objects S7 and HQ
         JavaSDM.ensure ( !S7.equals (HQ), "check isomorphic binding between objects S7 and HQ" );

         // check isomorphic binding between objects S9 and HQ
         JavaSDM.ensure ( !S9.equals (HQ), "check isomorphic binding between objects S9 and HQ" );

         // check isomorphic binding between objects SA and HQ
         JavaSDM.ensure ( !SA.equals (HQ), "check isomorphic binding between objects SA and HQ" );

         // check isomorphic binding between objects S9 and S7
         JavaSDM.ensure ( !S9.equals (S7), "check isomorphic binding between objects S9 and S7" );

         // check isomorphic binding between objects SA and S7
         JavaSDM.ensure ( !SA.equals (S7), "check isomorphic binding between objects SA and S7" );

         // check isomorphic binding between objects SA and S9
         JavaSDM.ensure ( !SA.equals (S9), "check isomorphic binding between objects SA and S9" );

         // check link followed by from S7 to D7
         JavaSDM.ensure (D7.equals (S7.getCard2 ()), "check link followed by from S7 to D7");

         // check link followed by from H8 to D8
         JavaSDM.ensure (D8.equals (H8.getCard2 ()), "check link followed by from H8 to D8");

         // check link followed by from H9 to DA
         JavaSDM.ensure (DA.equals (H9.getCard2 ()), "check link followed by from H9 to DA");

         // check link followed by from SA to HQ
         JavaSDM.ensure (HQ.equals (SA.getCard2 ()), "check link followed by from SA to HQ");

         // check link followed by from HQ to S9
         JavaSDM.ensure (S9.equals (HQ.getCard2 ()), "check link followed by from HQ to S9");

         // check link has hand from C10 to Artjom
         JavaSDM.ensure (Artjom.equals (C10.getPlayer ()), "check link has hand from C10 to Artjom");

         // check link has hand from S9 to Eero
         JavaSDM.ensure (Eero.equals (S9.getPlayer ()), "check link has hand from S9 to Eero");

         // check link has hand from DA to Ulno
         JavaSDM.ensure (Ulno.equals (DA.getPlayer ()), "check link has hand from DA to Ulno");

         // check link has top from D8 to OpenCards
         JavaSDM.ensure (OpenCards.equals (D8.getStack ()), "check link has top from D8 to OpenCards");

         // check link has top from D7 to Stack
         JavaSDM.ensure (Stack.equals (D7.getStack ()), "check link has top from D7 to Stack");

         // check link has from Turn to Ulno
         JavaSDM.ensure (Ulno.equals (Turn.getPlayer ()), "check link has from Turn to Ulno");

         // check link right of from Eero to Artjom
         JavaSDM.ensure (Artjom.equals (Eero.getP1 ()), "check link right of from Eero to Artjom");

         // check link right of from Ulno to Eero
         JavaSDM.ensure (Eero.equals (Ulno.getP1 ()), "check link right of from Ulno to Eero");

         // check link right of from Ulno to Artjom
         JavaSDM.ensure (Artjom.equals (Ulno.getP2 ()), "check link right of from Ulno to Artjom");

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Player Artjom = null;
      Card C10 = null;
      Player Eero = null;
      Turn Turn = null;
      Player Ulno = null;
      Card D8 = null;
      PlayingStack OpenCards = null;
      Card H8 = null;
      Card S9 = null;
      Card DA = null;
      Card H9 = null;
      Card D7 = null;
      Card S7 = null;
      Card SA = null;
      Card HQ = null;
      DrawingStack Stack = null;

      // // start situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object Artjom
         Artjom = new Player ( );

         // create object C10
         C10 = new Card ( );

         // create object Eero
         Eero = new Player ( );

         // create object Turn
         Turn = new Turn ( );

         // create object Ulno
         Ulno = new Player ( );

         // create object D8
         D8 = new Card ( );

         // create object OpenCards
         OpenCards = new PlayingStack ( );

         // create object H8
         H8 = new Card ( );

         // create object S9
         S9 = new Card ( );

         // create object DA
         DA = new Card ( );

         // create object H9
         H9 = new Card ( );

         // create object D7
         D7 = new Card ( );

         // create object S7
         S7 = new Card ( );

         // create object SA
         SA = new Card ( );

         // create object HQ
         HQ = new Card ( );

         // create object Stack
         Stack = new DrawingStack ( );

         // create link has hand from C10 to Artjom
         C10.setPlayer (Artjom);

         // create link right of from Eero to Artjom
         Eero.setP1 (Artjom);

         // create link has from Turn to Artjom
         Turn.setPlayer (Artjom);

         // create link right of from Ulno to Artjom
         Ulno.setP2 (Artjom);

         // create link object_Artjom from this to Artjom
         this.setArtjom (Artjom);

         // create link followed by from C10 to D8
         C10.setCard2 (D8);

         // create link object_D8 from this to D8
         this.setD8 (D8);

         // create link object_Turn from this to Turn
         this.setTurn (Turn);

         // create link has top from H8 to OpenCards
         H8.setStack (OpenCards);

         // create link object_OpenCards from this to OpenCards
         this.setOpenCards (OpenCards);

         // create link right of from Ulno to Eero
         Ulno.setP1 (Eero);

         // create link has hand from S9 to Eero
         S9.setPlayer (Eero);

         // create link object_Eero from this to Eero
         this.setEero (Eero);

         // create link has hand from DA to Ulno
         DA.setPlayer (Ulno);

         // create link object_Ulno from this to Ulno
         this.setUlno (Ulno);

         // create link object_C10 from this to C10
         this.setC10 (C10);

         // create link followed by from H9 to DA
         H9.setCard2 (DA);

         // create link object_DA from this to DA
         this.setDA (DA);

         // create link object_H9 from this to H9
         this.setH9 (H9);

         // create link followed by from S7 to D7
         S7.setCard2 (D7);

         // create link followed by from SA to D7
         SA.setCard2 (D7);

         // create link object_D7 from this to D7
         this.setD7 (D7);

         // create link followed by from HQ to S9
         HQ.setCard2 (S9);

         // create link object_S9 from this to S9
         this.setS9 (S9);

         // create link object_HQ from this to HQ
         this.setHQ (HQ);

         // create link has top from SA to Stack
         SA.setStack (Stack);

         // create link object_Stack from this to Stack
         this.setStack (Stack);

         // create link object_SA from this to SA
         this.setSA (SA);

         // create link object_H8 from this to H8
         this.setH8 (H8);

         // create link object_S7 from this to S7
         this.setS7 (S7);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testScenario_1 ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void removeYou()
   {
      this.setArtjom (null);
      this.setC10 (null);
      this.setD7 (null);
      this.setD8 (null);
      this.setDA (null);
      this.setEero (null);
      this.setH8 (null);
      this.setH9 (null);
      this.setHQ (null);
      this.setOpenCards (null);
      this.setS7 (null);
      this.setS9 (null);
      this.setSA (null);
      this.setStack (null);
      this.setTurn (null);
      this.setUlno (null);
   }
}


